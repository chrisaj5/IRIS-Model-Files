subsystem = IRIS
component = is

publish {
    events = [
	{
	    name = exposureRepeats
	    description = "Information about tracking the number of exposure repeats at current dither position and instrument configuration"
	    attributes = [
		{
		    name = currentIFSExposureNumber
		    description = "Number of current (if in progress) or last IFS exposure at current dither pattern with current instrument configuration (1-based)."
		    type = integer
		    minimum = 0
		}
		{
		    name = currentImagerExposureNumber
		    description = "Number of current (if in progress) or last imager exposure at current dither pattern with current instrument configuration (1-based)."
		    type = integer
		    minimum = 0
		}
		{
		    name = numberOfIFSExposures
		    description = "Total number of IFS exposures at current dither pattern."
		    type = integer
		    minimum = 0
		}
		{
		    name = numberOfImagerExposures
		    description = "Total number of IFS exposures at current dither pattern with current instrument configuration."
		    type = integer
		    minimum = 0
		}
	    ]
	}
	{
	    name = state
	    description = "This state attribute represents the state of the instrument sequencer with respect to command handling"
	    attributes = [
		{
			name = cmd
			description = """
This is the command handling state which can be:
•	UNITITIALIZED: the assembly is not properly initialized. Generally the only command that will be accepted in the state is [GROUP_]init.
•	READY: the assembly is ready to accept commands and is not processing / executing a command, and any ‘following’ background operations are not active.
•	BUSY: the assembly is currently processing / executing a command (any command). Generally only some commands will be accepted while in this state.
•	CONTINUOUS: The assembly has accepted a continuous-type (follow) command and the assembly is currently still in the continuous mode (i.e. taking continuous action or periodic action, e.g. follow mode or tracking). This state is somewhere between ready and busy. Generally only some commands will be accepted while in this state.

	Note that a REJECTED command does not change the cmd state
"""
		       enum = [UNITITIALIZED, READY, BUSY, CONTINUOUS]
		}
	     ]
	}
	{
	    name = cmdStatus 
	    description = "Status of the most recent command."
	    attributes = [
		{
			name =  command
			description = "Name of the most recent command processed by the command handler"
			type = string
		}
		{
			name = args 
			description = "String representation of the command arguments."
			type = string
		}
		{
			name =  caller
			description = "Identity of the caller (if available)"
			type = string
		}
		{
			name = runId 
			description = "Run ID associated with the command"
			type = integer
			minimum = 0
		}
		{
			name =  ack
			description = "Initial command acknowledgement: ACCEPTED | REJECTED. Not used by immediate commands"
			enum = [ACCEPTED, REJECTED]
		}
		{
			name =  ackMsg
			description = "Acknowledgement string explaining why a command is REJECTED. This string will be empty if the command is ACCEPTED. Not used by immediate commands"
			type = string
		}
		{
			name = comp 
			description = "Status of completion (only valid when the state.cmd is no longer BUSY),  SUCCESS | FAILED | INTERRUPTED | REJECTED.  The REJECTED status only applies to immediate type commands, since they do not send an acknowledgement, yet the command may still be invalid and therefore rejected."
			enum = [SUCCESS, FAILED, INTERRUPTED, REJECTED]
		}
		{
			name =  compMsg
			description = "Completion string explaining why a command is FAILED, INTERRUPTED or REJECTED. This string will be empty if the command is INPROGRESS or SUCCESS."
			type = string
		}
	     ]
	}
	{
	    name = globalMode
	    description = "Indicates current or last executed global mode"
	    attributes = [
		{
			name = mode
			description = "Indicates current or last executed global mode"
			enum = [INIT, DATUM, STOP, PARK, TEST, DEBUG, SHUTDOWN] 
		}
	     ]
	}
	{
	    name = observing
	    description = "This will indicate if the IFS and/or Imager is currently observing.  It will indicate when the start prepare event is triggered and stay that way until the observation complete event is issued"
	    attributes = [
		{
			name = ifs
			description = "IFS is currently observing, means when set the start prepare event was received and will stay that way until the observation is complete is received"
			type = boolean
		}
		{
			name = imager
			description = "IMAGER is currently observing, means when set the start prepare event was received and will stay that way until the observation is complete is received"
			type = boolean
		}
	     ]
	}
	{
	    name = aborting
	    description = "This will indicate if the IFS and/or Imager is currently aborting"
	    attributes = [
		{
			name = ifs
			description = "IFS is currently aborting"
			type = boolean
		}
		{
			name = imager
			description = "IMAGER is currently aborting"
			type = boolean
		}
	     ]
	}
	{
	    name = ifsMode
	    description = Indicates if in slicer or lenslet mode""
	    attributes = [
		{
			name = mode
			description = "Indicates if in slicer or lenslet mode"
			enum = [LENSLET, SLICER, UNKNOWN]
		}
	     ]
	}
	{
	    name = sciAdcFollow
	    description = "Indicates the science adc is in follow mode"
	    attributes = [
		{
			name = mode
			description = "indicates if science adc is currently following"
			enum = [FOLLOWING, NOT_FOLLOWING]
		}
	     ]
	}
	{
	    name = ifsObserveSettings
	    description = "The current configuration settings for the IFS Detector, #groups, #coadds, integration time, sampling mode"
	    attributes = [
		{
			name =  numRamps
			description = "Number of configured ramps.  Each ramp is bounded by resets and is of integration time in length.  Each ramp has the sampling mode applied.  The resultant raw Science Frame is created by adding the output of each ramp."
			type = integer
			minimum = 1
		}
		{
			name = integrationTime
			description = "Integration time, this is the length of time for each ramp"
			type = integer
			minimum = 1750
		}
		{
			name = samplingMode
			description = "This is the sampling mode.  This could be CDS, MDS or UTR"
			enum = [CDS, MDS, UTR]
		}
		{
			name = numReads
			description = "Number of raw readouts used in the sampling mode per ramp.  This is the number of raw readouts that are added together before being used in the sampling mode to create a single frame.  This number is only used in sample modes of MDS and UTR"
			type = integer
		}
	     ]
	}
	{
	    name = imagerObserveSettings
	    description = "The current configuration settings for the Imager Detector, #groups, #coadds, integration time, sampling mode"
	    attributes = [
		{
			name =  numRamps
			description = "Number of configured ramps.  Each ramp is bounded by resets and is of integration time in length.  Each ramp has the sampling mode applied.  The resultant raw Science Frame is created by adding the output of each ramp."
			type = integer
			minimum = 1
		}
		{
			name = integrationTime
			description = "Integration time, this is the length of time for each ramp"
			type = integer
			minimum = 1750
		}
		{
			name = samplingMode
			description = "This is the sampling mode.  This could be CDS, MDS or UTR"
			enum = [CDS, MDS, UTR]
		}
		{
			name = numReads
			description = "Number of raw readouts used in the sampling mode per ramp.  This is the number of raw readouts that are added together before being used in the sampling mode to create a single frame.  This number is only used in sample modes of MDS and UTR"
			type = integer
		}
	     ]
	}
	{
	    name = startPrepare
	    description = "This event indicates that an observation has started, it will include which detector(s) this references"
	    attributes = [
		{
			name = ifsStartPrepare
			description = "The IFS is preparing for the observation"
			type =  boolean
		}
		{
			name = imagerStartPrepare
			description = "The Imager is preparing for the observation"
			type =  boolean
		}
	     ]
	}
	{
	    name = startDataAcquisition
	    description = "This event indicates that data acquisition has started, which is difficult to show in an IR detector as the reads are non-destructive.  It will show this value when it first starts observing.  It will include which detector(s) this references."
	    attributes = [
		{
			name = ifsStartDataAcquisition
			description = "IFS has started data acquisition."
			type =  boolean
		}
		{
			name = imagerStartDataAcquisition
			description = "Imager has started data acquisition."
			type =  boolean
		}
	     ]
	}
	{
	    name = endDataAcquisition
	    description = "This event indicates that data acquisition has completed, which will be when the last readout is sent to the Readout Processor.   It will show this value when it first starts observing.  It will include which detector(s) this references."
	    attributes = [
		{
			name = ifsEndDataAcquisition
			description = "IFS has finished data acquisition"
			type =  boolean
		}
		{
			name = imagerEndDataAcquisition
			description = "Imager has finished data acquisition"
			type =  boolean
		}
	     ]
	}
	{
	    name = startReadout
	    description = "This event indicates that the first readout is received by the Readout Processor.  It will include which detector(s) this references."
	    attributes = [
		{
			name = ifsStartReadout
			description = "Readout Processor has started readout of IFS data"
			type =  boolean
		}
		{
			name = imagerStartReadout
			description = "Readout Processor has started readout of Imager data"
			type =  boolean
		}
	     ]
	}
	{
	    name = endReadout
	    description = "This event indicates that the last readout has been received by the Readout Processor and has completed processing that readout.  It will include which detector(s) this references."
	    attributes = [
		{
			name = ifsEndReadout
			description = "Readout Processor has completed last readout of IFS data"
			type =  boolean
		}
		{
			name = imagerEndReadout
			description = "Readout Processor has completed last readout of Imager data"
			type =  boolean
		}
	     ]
	}
	{
	    name = startDatasetWrite
	    description = "This event indicates that all of the readouts are being combined into a Science Frame.  It will include which detector(s) this references."
	    attributes = [
		{
			name = ifsEndReadout
			description = "Readout Processor is starting to combine IFS data into a Science Frame"
			type =  boolean
		}
		{
			name = imagerEndReadout
			description = "Readout Processor is starting to combine Imager data into a Science Frame"
			type =  boolean
		}
	     ]
	}
	{
	    name =  endDatasetWrite
	    description = " This event indicates that the Science Frame has been written to disk. I will include which detector(s) this references."
	    attributes = [
		{
			name = ifsEndReadout
			description = "Readout Processor has combined IFS data into a Science Frame"
			type =  boolean
		}
		{
			name = imagerEndReadout
			description = "Readout Processor has combined Imager data into a Science Frame"
			type =  boolean
		}
	     ]
	}
	{
	    name = observeComplete
	    description = "This event indicates that an observation has completed and will trigger the sending of the data to the DMS (TBD), it will include which detector(s) this references"
	    attributes = [
		{
			name = ifsObserveComplete
			description = "Indicates IFS observation is complete and will trigger the ending of the data to the DMS"
			type =  boolean
		}
		{
			name = imagerObserveComplete
			description = "Indicates Imager observation is complete and will trigger the ending of the data to the DMS"
			type =  boolean
		}
	     ]
	}
	{
	    name = observationId
	    description = "This is the assigned Observation ID, as received from the ESW"
	    attributes = [
		{
			name = id
			description = "Observation Id"
			type = integer
			minimum = 0
		}
	     ]
	}
//************

	{
	    name = observerKeywords
	    description = "This is the observer properties that are saved and published and used by the DRS to put into the keywords for the dataset, assume for both IFS and Imager"
	    attributes = [
		   {
			name = observer
			description = "Observer name(s)"
			type = string
		    }
		    {
			name = piName
			description = "Name(s) of PI"
			type = string
			default = "unknown"
		    }
		    {
			name = partner
			description = "Name(s) of partner(s)"
			type = string
			default = "unknown"
		    }
		    {
			name = proposal
			description = "Proposal ID"
			type = string
			default = "unknown"
		    }
		    {
			name = fullDataDirectoryPath
			description = "This is the full pathname to where the science data will be stored"
			type = string
		    }
	     ]
	}

//**********************
	{
	    name =  observationBlockKeywords
	    description = "These are the observation block properties.   The type of information include observation type, object name, object RA, object Dec, skyPattern,objectPosition, sky Position, dither coordinates. This setup is used to represent information for a single observation."
	    attributes = [
	     {
		name = imagerObservationID
		description = "Identification string of the imager observation, this will be used in creating the name of the 4 files that will be written as part of the observation.  The observation setup is done during observationSetup"
		type = string
	    }
	    {
		name = observationType
		description = "Type of observation (science, star, calibration)"
		enum = [science, star, calibration]
	    }
	    {
		name = object
		description = "Object Name"
		type = string
	    }
	    {
		name = objectRA
		description = "Object right ascension"
		type = float
	    }
	    {
		name = objectDec
		description = "Object declination"
		type = float
	    }
	    {
		name = objectPattern
		description = "Dither pattern for object frames.  This will likely eventually be a TBD enum type"
		type = string 
		default = "unknown"
	    }
	    {
		name = skyPattern
		description = "Dither pattern for object frames.  This will likely eventually be a TBD enum type"
		type = string
		default = "unknown"
	    }
	    {
		name = objectPositions
		description = "Number of positions in object dither pattern"
		type = integer
	    }
	    {
		name = skyPositions
		description = "Number of positions in sky dither pattern"
		type = integer
	    }
	    {
		name = ditherCoordinates
		description = "Coordinate system for dither offset values"
		enum = [sky, instrument]
	    }
          ]
	}

//**************
	{
	    name =  scriptName
	    description = "Name of the script to execute. Useful for debug purposes and the gui"
	    attributes = [
	      {
		name = fileName
		description = "Name of the file to get from the configuration service"
		type = string
	      }
	    ]
         }
    ]
}
