subsystem = IRIS
component = is

description = "IRIS Instrument Sequencer commands."

receive = [
//*********
//  setupGlobal

    {
   name = setupGlobal
    description = "Perform global command to some of all of the IRIS software systems."
       args = [
           {
           name = command
           description = """
Command to be executed.
Perform a generic command (init, datum, stop, park, test, debug, shutdown)  by passing the command down to the specified Assembly or to all Assemblies.  In cases where there are multiple functional groups they will be passed to all functional groups.
init: Read in configuration, then fan out the “init” command to one or all IRIS subsystems.  If no argument is specified, all subsystems will be initialized
datum: Datum all or a subset of Assemblies which should move to a known starting position.
Cannot datum if currently initializing or shutting down
Stop: Stop executing the current executing commands and any future commands
Park: Park all or a subset of Assemblies which should cause a system to adopt an internal configuration in which it can be safely switched off. This should be called at the end of an observing session (eg. night) or when a principal system will enter a time of extended disuse. The command completes successfully when the system is ready to be powered down. This command fails if a problem is encountered while preparing to park. 
Test: This will send the test command to all Assemblies or a subset as specified in the command
Debug: Set debug level for IS only
 Shutdown: This is will send the shutdown command to all Assemblies and HCD’s.  It will wait a preset amount of time which is until all heartbeats should be stopped (reporting errors) and then exit

"""
           enum = [INIT, DATUM, TEST, PARK, DEBUG, STOP, SHUTDOWN]
       }
       {
                name = whichSubsystem
                description = "Select subsystem to be initialized. CSRO: This is the Cryo Env, Cold Stop, DRS, Filter, IFS Detector, Scale, Spectral, Imager Detector, OIWFS Env, Pupil Viewing, Sci ADC. In cases where there are multiple functional groups they are sent to all functional groups"
                enum = [ALL, CSRO, EL, IMG, IFS, SC, DRS]
            }
        ]
    }

//*************
//  setupCryoEnv

    {
      name = setupCryoEnv
      description = """

This is the interface to trigger the cooldown or warmup of the science cryostat.  This is achieved by commanding the Cryostat Environment Assembly by adjusting the state (Warm, Pumping, Warm Vacuum, Cooling, Cold, Warming, Pressurizing).  These functions are operationally a manual operation and TBD if it will be commanded through the IS or via a GUI. 

Accepted states are :

      * Warm 
      * Pumping
      * Cooling
      * Cold
      * Warming
      * Pressurizing

"""
	args = [
          {
          name = state
	  description = desired state to achieve.
          enum = [Warm, Pumping, Cooling, Cold, Warming, Pressurizing]
          }
        ]
    }

//*************
//  setupObservation

    {
      name = setupObservation
      description = "Setup IRIS for observation. This will include filter, setting platescale, spectral resolution for IFS observations, start science ADC following, start cold stop following, Detector setup (integration time, number of coadditions, number of groups, sampling mode)."
      args = [
        {
	  name = filter
	  description = "Filter to use for imaging and spectroscopy (TBD confirm list)"
	  enum = [Z, Y, J, H, K, Ks, "H+K notch", CO, BrGamma, PaBeta, H2, FeII, HeI, CaII Trip, J Cont, H Cont, K Cont, Zn1, Zn2, Zn3, Zn4, Yn1, Yn2, Yn3, Yn4, Jn1, Jn2, Jn3, Jn4, Jn5, Hn1, Hn2, Hn3, Hn4, Hn5, Kn1, Kn2, Kn3, Kn4, Kn5] 
        }
        {
          name = scale
	  description = "Platescale for IFS observations"
	  enum = [4, 9, 25, 50]
	  units = mas
        }
        {
          name = spectralResolution
	  description = "Spectral resolution (grating) for IFS observations"
	  enum = [4000-Z, 4000-Y, 4000-J, 4000-H, 4000-K, "4000-H+K", 8000-Z, 8000-Y, 8000-J, 8000-H, 8000-Kn1-3, 8000-Kn4-5, 8000-Kbb, 10000-Z, 10000-Y, 10000-J, 10000-H, 10000-K, Mirror]
        }
        {
          name = lensletMask
	  description = "Selection of IFS lenslet mask"
	  enum = [FullyOpen, SerratedWideMask, FineMask, SingleFineMask]
        }
        {
          name = slicerMask
	  description = "Selection of IFS slicer mask"
	  enum = [Full, Half]
        }
	# the following two arguments to config could be broken out into individual functions
	# oiwfs ADC, instrument rotator controlled by AOESW.	
	{
	  name = scienceAdcFollow
	  description = "Enable or disable following of TCS stream for positioning science ADC."
	  type = boolean
	}	
	{
	  name = scienceColdStopFollow
	  description = "Enable or disable following of TCS stream for positioning science cold stop."
	  type = boolean
	}
        {
	  name = imagerIntegrationTime
          description = "Integration time in ms for each Imager exposure.  This is the length of time for each ramp"
	  type = integer
          minimum = 1750
	  units = ms 
        }
        {
	  name = imagerNumRamps
          description = "Number of ramps.  Each ramp is the length of the integration time.  Each of these ramps are added together to create the imager raw Science Frame."
	  type = integer
          minimum = 1
        }
        {
	  name = imagerSamplingMode
	  description = "Type of processing of imager pixels: CDS, MDS, UTR"
	  enum = [CDS, MCD, UTR]
        }
        {
	  name = imagerNumReads
	  description = "Number of raw readouts per ramp to perform.  Only used for MDS and UTR this must be > 2"
	  type = integer
          minimum = 2
          exclusiveMinimum = true
        }
        {
	  name = ifsIntegrationTime
          description = "Integration time in ms for each IFS exposure.  This is the length of time for each ramp"
	  type = integer
          minimum = 1750
	  units = ms 
        }
        {
	  name = ifsNumRamps
          description = "Number of ramps.  Each ramp is the length of the integration time.  Each of these ramps are added together to create the IFS raw Science Frame."
	  type = integer
          minimum = 1
        }
        {
	  name = ifsSamplingMode
	  description = "Type of processing of IFS pixels: CDS, MDS, UTR"
	  enum = [CDS, MCD, UTR]
        }
        {
	  name = ifsNumReads
	  description = "Number of reads per ramp to perform.  Only used for MDS and UTR this must be > 2"
	  type = integer
          minimum = 2
          exclusiveMinimum = true
        }
     ]
    }
//*************
//  setObserverKeywords

    {
	name = setObserverKeywords
	description = "Configure IRIS with specified observer properties. This will set published values that will be used by the DRS and include Observer name, PI name(s), Partner names, and Proposal ID.  This setup may be for a group of observations"
	args = [
	    {
		name = observer
		description = "Observer name(s)"
		type = string
	    }
	    {
		name = piName
		description = "Name(s) of PI"
		type = string
	    }
	    {
		name = partner
		description = "Name(s) of partner(s)"
		type = string
	    }
	    {
		name = proposal
		description = "Proposal ID"
		type = string
	    }
	    {
		name = fullDataDirectoryPath
		description = "This is the full pathname to where the science data will be stored"
		type = string
	    }
	]
    } 

//################################
//  setObsBlockKeywords

    {
	name = setObsBlockKeywords
	description = "Configure IRIS with specified observation block properties.  This will set published values that will be used by the DRS and include observation ID(Imager & IFS), observation type, object name, object RA, object Dec, skyPattern,objectPosition, sky Position, dither coordinates. This setup is used to represent information for a single observation."
	args = [
	     {
		name = imagerObservationID
		description = "Identification string of the imager observation, this will be used in creating the name of the 4 files that will be written as part of the observation.  The observation setup is done during observationSetup"
		type = string
		default = "unknown"
	    }
	    {
		name = observationType
		description = "Type of observation (science, star, calibration)"
		enum = [science, star, calibration]
	    }
	    {
		name = object
		description = "Object Name"
		type = string
		default = "unknown"
	    }
	    {
		name = objectRA
		description = "Object right ascension"
		type = float
	    }
	    {
		name = objectDec
		description = "Object declination"
		type = float
	    }
	    {
		name = objectPattern
		description = "Dither pattern for object frames.  This will likely eventually be a TBD enum type"
		type = string 
		default = "unknown"
	    }
	    {
		name = skyPattern
		description = "Dither pattern for object frames.  This will likely eventually be a TBD enum type"
		type = string
		default = "unknown"
	    }
	    {
		name = objectPositions
		description = "Number of positions in object dither pattern"
		type = integer
		default = 1
		minimum = 0
	    }
	    {
		name = skyPositions
		description = "Number of positions in sky dither pattern"
		type = integer
		default = 0
		minimum = 0
	    }
	    {
		name = ditherCoordinates
		description = "Coordinate system for dither offset values"
		enum = [sky, instrument]
	    }
	]
    } //# end of setObsBlockKeywords

//################################
//  observe
    { 
      name = observe
      description = "This will initiate or stop an observation with the Imager of IFS using the configuration previously set."
      args = [
	    {
		name = imagerObserve
		description = "Imager observation action.  This is an enum, where Start will start the Imager observing, Stop will stop the current exposure and save the data that was collected to the DMS, and Abort will stop the current exposure and discard the data"
		enum = [START, STOP, ABORT]
	}
       {
		name = ifsObserve
		description = "IFS observation action.  This is an enum, where Start will start the Imager observing, Stop will stop the current exposure and save the data that was collected to the DMS, and Abort will stop the current exposure and discard the data"
		enum = [START, STOP, ABORT]

	}
        {
		name = ifsObservationID
		description = "Identification string for the ifs observation, this will be used in creating the name of the file along with the ifsConfiguration ID.  The Observation ID is common for all observes in one observation block.  The observation setup is done during observationSetup"
		type = string
		default = "unknown"
       }
        {
		name = ifsConfigurationID
		description = "Unique Identification string for this observation block.  It is used with the Observation ID to create a unique identifier for this observe. The observation setup is done during observationSetup"
		type = string
		default = "unknown"
       }
        {
		name = imagerObservationID
		description = "Identification string for the imager observation, this will be used in creating the name of the file along with the Configuration ID.  The Observation ID is common for all observes in one observation block.  The observation setup is done during observationSetup"
		type = string
		default = "unknown"
       }
        {
		name = imagerConfigurationID
		description = "Unique Identification string for this observation block.  It is used with the Observation ID to create a unique identifier for this observe. The observation setup is done during observationSetup"
		type = string
		default = "unknown"
       }
      ]
    } //# end of observe
    {
      name = executeScript
      description = "Execute script that is formatted in JSON format.  It will stay busy until complete."
      args = [
	    {
		name = fileName
		description = "This is the name of the file to get from the Configuration Service.  The file must be in JSON format and include only the commands available to the IS.  The file is read in and the format verified.  Then the commands are executed.  Everything in a group is done asynchronously, but between groups all previous commands must complete."
		type = string
		default = "unknown"
            }
	    {
		name = runID
		description = "This will either pause the currently executing script.  If no script is running this is a NOOP.  Or it will resume the script identified by the runID"
		enum = [START, PAUSE ]
            }
      ]
    } # end of executeScript

]

send = [
//*******
     // cabinet-environment assembly
     {
	name=GLY_init
     	subsystem=IRIS
     	component=cabinet-environment-assembly
     }
     {
	name=GLY_test
     	subsystem=IRIS
     	component=cabinet-environment-assembly
     }
     {
	name=TEMP_init
     	subsystem=IRIS
     	component=cabinet-environment-assembly
     }
     {
	name=TEMP_test
     	subsystem=IRIS
     	component=cabinet-environment-assembly
     }
     {
	name=shutdown
     	subsystem=IRIS
     	component=cabinet-environment-assembly
     }
//*******
     // cryoenv assembly
     {
	name=IMG_init
     	subsystem=IRIS
     	component=cryoenv-assembly
     }
     {
	name=IMG_select
     	subsystem=IRIS
     	component=cryoenv-assembly
     }
     {
	name=IMG_setTemp
     	subsystem=IRIS
     	component=cryoenv-assembly
     }
     {
	name=IMG_test
     	subsystem=IRIS
     	component=cryoenv-assembly
     }
     {
	name=IFS_init
     	subsystem=IRIS
     	component=cryoenv-assembly
     }
     {
	name=IFS_select
     	subsystem=IRIS
     	component=cryoenv-assembly
     }
     {
	name=IFS_setTemp
     	subsystem=IRIS
     	component=cryoenv-assembly
     }
     {
	name=IFS_test
     	subsystem=IRIS
     	component=cryoenv-assembly
     }
     {
	name=WIN_init
     	subsystem=IRIS
     	component=cryoenv-assembly
     }
     {
	name=WIN_select
     	subsystem=IRIS
     	component=cryoenv-assembly
     }
     {
	name=WIN_setTemp
     	subsystem=IRIS
     	component=cryoenv-assembly
     }
     {
	name=WIN_test
     	subsystem=IRIS
     	component=cryoenv-assembly
     }
     {
	name=PV_init
     	subsystem=IRIS
     	component=cryoenv-assembly
     }
     {
	name=PV_select
     	subsystem=IRIS
     	component=cryoenv-assembly
     }
     {
	name=PV_setTemp
     	subsystem=IRIS
     	component=cryoenv-assembly
     }
     {
	name=PV_test
     	subsystem=IRIS
     	component=cryoenv-assembly
     }
     {
	name=PRESS_init
     	subsystem=IRIS
     	component=cryoenv-assembly
     }
     {
	name=PRESS_select
     	subsystem=IRIS
     	component=cryoenv-assembly
     }
     {
	name=PRESS_test
     	subsystem=IRIS
     	component=cryoenv-assembly
     }
     {
	name=shutdown
     	subsystem=IRIS
     	component=cryoenv-assembly
     }
//*******
     // cold stop
     {
	name=INIT
     	subsystem=IRIS
     	component=coldstop-assembly
     }
     {
	name=DATUM
     	subsystem=IRIS
     	component=coldstop-assembly
     }
     {
	name=PARK
     	subsystem=IRIS
     	component=coldstop-assembly
     }
     {
	name=STOP
     	subsystem=IRIS
     	component=coldstop-assembly
     }
     {
	name=TEST
     	subsystem=IRIS
     	component=coldstop-assembly
     }
     {
	name=SHUTDOWN
     	subsystem=IRIS
     	component=coldstop-assembly
     }
     {
	name=FOLLOW
     	subsystem=IRIS
     	component=coldstop-assembly
     }
     {
	name=MOVE
     	subsystem=IRIS
     	component=coldstop-assembly
     }
     {
	name=SELECT
     	subsystem=IRIS
     	component=coldstop-assembly
     }
//**************
     // ifs Detector assembly
     {
	name=INIT
     	subsystem=IRIS
     	component=ifs-detector-assembly
     }
     {
	name=DATUM
     	subsystem=IRIS
     	component=ifs-detector-assembly
     }
     {
	name=PARK
     	subsystem=IRIS
     	component=ifs-detector-assembly
     }
     {
	name=TEST
     	subsystem=IRIS
     	component=ifs-detector-assembly
     }
     {
	name=SHUTDOWN
     	subsystem=IRIS
     	component=ifs-detector-assembly
     }
     {
	name=LOAD_CONFIGURATION
     	subsystem=IRIS
     	component=ifs-detector-assembly
     }
     {
	name=START_EXPOSURE
     	subsystem=IRIS
     	component=ifs-detector-assembly
     }
     {
	name=ABORT_EXPOSURE
     	subsystem=IRIS
     	component=ifs-detector-assembly
     }
//****************
     //ifs scale
     {
	name=INIT
     	subsystem=IRIS
     	component=ifs-scale-assembly
     }
     {
	name=DATUM
     	subsystem=IRIS
     	component=ifs-scale-assembly
     }
     {
	name=PARK
     	subsystem=IRIS
     	component=ifs-scale-assembly
     }
     {
	name=STOP
     	subsystem=IRIS
     	component=ifs-scale-assembly
     }
     {
	name=TEST
     	subsystem=IRIS
     	component=ifs-scale-assembly
     }
     {
	name=SHUTDOWN
     	subsystem=IRIS
     	component=ifs-scale-assembly
     }
     {
	name=SELECT
     	subsystem=IRIS
     	component=ifs-scale-assembly
     }
//****************
     //ifs spec
     {
	name=GRATING_INIT
     	subsystem=IRIS
     	component=ifs-spectralres-assembly
     }
     {
	name=GRATING_DATUM
     	subsystem=IRIS
     	component=ifs-spectralres-assembly
     }
     {
	name=GRATING_PARK
     	subsystem=IRIS
     	component=ifs-spectralres-assembly
     }
     {
	name=GRATING_STOP
     	subsystem=IRIS
     	component=ifs-spectralres-assembly
     }
     {
	name=GRATING_TEST
     	subsystem=IRIS
     	component=ifs-spectralres-assembly
     }
     {
	name=GRATING_SELECT
     	subsystem=IRIS
     	component=ifs-spectralres-assembly
     }
     {
	name=LENSLETMASK_INIT
     	subsystem=IRIS
     	component=ifs-spectralres-assembly
     }
     {
	name=LENSLETMASK_DATUM
     	subsystem=IRIS
     	component=ifs-spectralres-assembly
     }
     {
	name=LENSLETMASK_PARK
     	subsystem=IRIS
     	component=ifs-spectralres-assembly
     }
     {
	name=LENSLETMASK_STOP
     	subsystem=IRIS
     	component=ifs-spectralres-assembly
     }
     {
	name=LENSLETMASK_TEST
     	subsystem=IRIS
     	component=ifs-spectralres-assembly
     }
     {
	name=LENSLETMASK_SELECT
     	subsystem=IRIS
     	component=ifs-spectralres-assembly
     }
     {
	name=SLICERMASK_INIT
     	subsystem=IRIS
     	component=ifs-spectralres-assembly
     }
     {
	name=SLICERMASK_DATUM
     	subsystem=IRIS
     	component=ifs-spectralres-assembly
     }
     {
	name=SLICERMASK_PARK
     	subsystem=IRIS
     	component=ifs-spectralres-assembly
     }
     {
	name=SLICERMASK_STOP
     	subsystem=IRIS
     	component=ifs-spectralres-assembly
     }
     {
	name=SLICERMASK_TEST
     	subsystem=IRIS
     	component=ifs-spectralres-assembly
     }
     {
	name=SLICERMASK_SELECT
     	subsystem=IRIS
     	component=ifs-spectralres-assembly
     }
     {
	name=SHUTDOWN
     	subsystem=IRIS
     	component=ifs-spectralres-assembly
     }
//****************
     // imager Detector assembly
     {
	name=INIT
     	subsystem=IRIS
     	component=imager-detector-assembly
     }
     {
	name=DATUM
     	subsystem=IRIS
     	component=imager-detector-assembly
     }
     {
	name=PARK
     	subsystem=IRIS
     	component=imager-detector-assembly
     }
     {
	name=TEST
     	subsystem=IRIS
     	component=imager-detector-assembly
     }
     {
	name=LOAD_CONFIGURATION
     	subsystem=IRIS
     	component=imager-detector-assembly
     }
     {
	name=START_EXPOSURE
     	subsystem=IRIS
     	component=imager-detector-assembly
     }
     {
	name=ABORT_EXPOSURE
     	subsystem=IRIS
     	component=imager-detector-assembly
     }
     {
	name=SHUTDOWN
     	subsystem=IRIS
     	component=imager-detector-assembly
     }
//****************
     // detector assembly
     {
	name=DETECTOR_INIT
     	subsystem=IRIS
     	component=pupilview-assembly
     }
     {
	name=DETECTOR_TEST
     	subsystem=IRIS
     	component=pupilview-assembly
     }
     {
	name=DETECTOR_DATUM
     	subsystem=IRIS
     	component=pupilview-assembly
     }
     {
	name=DETECTOR_PARK
     	subsystem=IRIS
     	component=pupilview-assembly
     }
     {
	name=DETECTOR_LOAD_CONFIGURATION
     	subsystem=IRIS
     	component=pupilview-assembly
     }
     {
	name=DETECTOR_START_EXPOSURE
     	subsystem=IRIS
     	component=pupilview-assembly
     }
     {
	name=DETECTOR_ABORT_EXPOSURE
     	subsystem=IRIS
     	component=pupilview-assembly
     }
     {
	name=MIRROR_INIT
     	subsystem=IRIS
     	component=pupilview-assembly
     }
     {
	name=MIRROR_DATUM
     	subsystem=IRIS
     	component=pupilview-assembly
     }
     {
	name=MIRROR_PARK
     	subsystem=IRIS
     	component=pupilview-assembly
     }
     {
	name=MIRROR_TEST
     	subsystem=IRIS
     	component=pupilview-assembly
     }
     {
	name=MIRROR_STOP
     	subsystem=IRIS
     	component=pupilview-assembly
     }
     {
	name=MIRROR_SELECT
     	subsystem=IRIS
     	component=pupilview-assembly
     }
     {
	name=MOUNT_INIT
     	subsystem=IRIS
     	component=pupilview-assembly
     }
     {
	name=MOUNT_DATUM
     	subsystem=IRIS
     	component=pupilview-assembly
     }
     {
	name=MOUNT_PARK
     	subsystem=IRIS
     	component=pupilview-assembly
     }
     {
	name=MOUNT_TEST
     	subsystem=IRIS
     	component=pupilview-assembly
     }
     {
	name=MOUNT_STOP
     	subsystem=IRIS
     	component=pupilview-assembly
     }
     {
	name=MOUNT_MOVE
     	subsystem=IRIS
     	component=pupilview-assembly
     }
     {
	name=SHUTDOWN
     	subsystem=IRIS
     	component=pupilview-assembly
     }
//****************
     // power assembly
     {
	name=init
     	subsystem=IRIS
     	component=power-assembly
     }
     {
	name=test
     	subsystem=IRIS
     	component=power-assembly
     }
     {
	name=turnOn
     	subsystem=IRIS
     	component=power-assembly
     }
     {
	name=turnOff
     	subsystem=IRIS
     	component=power-assembly
     }
     {
	name=shutdown
     	subsystem=IRIS
     	component=power-assembly
     }
//**************
     // sci adc assembly
     {
	name=RETRACT_INIT
     	subsystem=IRIS
     	component=sci-adc-assembly
     }
     {
	name=RETRACT_DATUM
     	subsystem=IRIS
     	component=sci-adc-assembly
     }
     {
	name=RETRACT_PARK
     	subsystem=IRIS
     	component=sci-adc-assembly
     }
     {
	name=RETRACT_STOP
     	subsystem=IRIS
     	component=sci-adc-assembly
     }
     {
	name=RETRACT_TEST
     	subsystem=IRIS
     	component=sci-adc-assembly
     }
     {
	name=RETRACT_SELECT
     	subsystem=IRIS
     	component=sci-adc-assembly
     }
     {
	name=PRISM_INIT
     	subsystem=IRIS
     	component=sci-adc-assembly
     }
     {
	name=PRISM_DATUM
     	subsystem=IRIS
     	component=sci-adc-assembly
     }
     {
	name=PRISM_PARK
     	subsystem=IRIS
     	component=sci-adc-assembly
     }
     {
	name=PRISM_STOP
     	subsystem=IRIS
     	component=sci-adc-assembly
     }
     {
	name=PRISM_TEST
     	subsystem=IRIS
     	component=sci-adc-assembly
     }
     {
	name=PRISM_FOLLOW
     	subsystem=IRIS
     	component=sci-adc-assembly
     }
     {
	name=PRISM_MOVE
     	subsystem=IRIS
     	component=sci-adc-assembly
     }
     {
	name=SHUTDOWN
     	subsystem=IRIS
     	component=sci-adc-assembly
     }
//****************
     // sci Filter assembly
     {
	name=INIT
     	subsystem=IRIS
     	component=sci-filter-assembly
     }
     {
	name=DATUM
     	subsystem=IRIS
     	component=sci-filter-assembly
     }
     {
	name=PARK
     	subsystem=IRIS
     	component=sci-filter-assembly
     }
     {
	name=TEST
     	subsystem=IRIS
     	component=sci-filter-assembly
     }
     {
	name=SELECT
     	subsystem=IRIS
     	component=sci-filter-assembly
     }
     {
	name=SHUTDOWN
     	subsystem=IRIS
     	component=sci-filter-assembly
     }
]
