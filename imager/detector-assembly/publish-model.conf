subsystem = IRIS
component = imager-detector-assembly

publish {
    telemetry = [
    {
      name = state
      description = "Standard assembly state as defiend in [Technical Document: Software Design Patterns for Device and Component Controllers (TMT.INS.TEC.16.079.REL01)](https://docushare.tmt.org/docushare/dsweb/Get/Document-57492/cc_design_patterns_REL01.pdf)."
      maxRate = 1
      archive = true
      archiveRate = 1
      attributes = [
        {
            name = cmd
            description  = "command state"
            enum = [UNINITIALIZED, READY, BUSY, COTINUOUS]
        }
        {
            name = debug
            description  = "debug level"
            enum = [TBD]
        }
        {
            name = locked
            description = "Indicates whether this assembly is locked. Any command that powers on, or initiates an exposure will be rejected when locked."
            type = boolean
        }
        {
            name = interlock
            description = "Indicates whether the exposure is prohibited due to the interlock signal from Safety HCD."
            type = boolean
        }
      ]
    }
    {
      name = cmdStatus
      description = "Standard assembly command status as defiend in [Technical Document: Software Design Patterns for Device and Component Controllers (TMT.INS.TEC.16.079.REL01)](https://docushare.tmt.org/docushare/dsweb/Get/Document-57492/cc_design_patterns_REL01.pdf)."
      maxRate = 1
      archive = true
      archiveRate = 1
      attributes = [
        {
            name = command
            description  = "Name of the most recent command."
            type = string
        }
        {
            name = args
            description  = "String representation of the command arguments."
            type = string
        }
        {
            name = caller
            description  = "String identifying the caller (if available)"
            type = string
        }
        {
            name = runID
            description  = "A run ID associated with the command."
            type = integer
        }
        {
            name = ack
            description  = "Initial acknowledgement"
            enum = [ACCEPTED, REJECTED]
        }
        {
            name = ackMsg
            description  = "Acknowledgement string explaining why a command is REJECTED. This string will generally be cleared if the command is ACCEPTED."
            type = string
        }
        {
            name = completion
            description  = "Status of completion"
            enum = [INPROGRESS, SUCCESS, FAILED, INTERRUPTED, REJECTED]
        }
        {
            name = completionMsg
            description  = "The message string is cleared when a command has been successfully acknowledged and/or is INPROGRESS. The message string is filled in if the command fails."
            type = string
        }
      ]
    }
        {
            name = currentConfig
            description = """
The current loaded configuration that is currently used by the on-going exposure, or that will be used by the next exposure. This telemetry includes Observation ID, actual integration time of one ramp, the nubmer of ramps, etc. It can be used to confirm the loaded configuration before starting the next exposure.
"""
            maxRate = 1
            archive = true
            archiveRate = 1
            attributes = [
                {
                    name = obsId
                    description = "Observation ID given by LOAD_CONFIGURATION command."
                    type = string
                }
                {
                    name = totalTime
                    description = "Actual total exposure time which is _rampIntegrationTime_ multiplied by _ramps_."
                    type = float
                    units = s
                    minimum = 0
                }
                {
                    name = rampIntegrationTime
                    description  = "Actual integration time of one ramp, which is the time between resets. The reuqested integration time is rounded down to the nearest valid integration time which is a multiple of _readoutTime_."
                    type = float
                    minimum = 1.75
                    units = s
                }
                {
                    name = readoutTime
                    description  = """Time to clock one detector, which is dependent on pixel clocking time and subarray dimensions and channels used.

__TBD__: Consider the impact of ODGW.
"""
                    type = float
                    units = s
                }
                {
                    name = reads
                    description = "Number of reads in one ramp. This value is calculated from the requested integration time for one ramp."
                    type = integer
                    minimum = 1
                    maximum = 100000
                }
                {
                    name = ramps
                    description = "Number of ramps in one exposure which is given by LOAD_CONFIGURATION command."
                    type = integer
                    minimum = 1
                    maximum = 100000
                    default = 1
                }
            ]
        }
        {
            name = systemConf
            description = """
The current detector configuration including gain, pixel clocking time and nominal read noise of the entire array measured at the commissioning time.

This configuration is rarely changed every exposure. This configuration will be updated when INIT command is issued.
"""
            maxRate = 1
            archive = true
            archiveRate = 1
            attributes = [
                {
                    name = detectorName
                    description = "Serial number of each detector."
                    type = array
                    dimensions = [4]
                    items = {
                        type = string
                    }
                }
                {
                    name = use
                    description = "Indicates whether this detector is used or not."
                    type = boolean
                }
                {
                    name = gain
                    description = "Conversion of photoelectrons to counts for each detector."
                    type = array
                    dimensions = [4]
                    items = {
                        type = float
                    }
                    units = e-/ADU
                }
                {
                    name = readNoise
                    description = """
Nominal read noise of the entire array measured at commissioning phase.

Note that the read noise may be different among pixels, channels or areas. The actual read noise of science observation should be measured from the taken images.
"""
                    type = array
                    dimensions = [4]
                    items = {
                        type = float
                    }
                    units = e-
                }
                {
                    name = pixelClockingTime
                    description  = "Time to select and read one pixel."
                    type = float
                    units = ms
                }
                {
                    name = resetLevel
                    description = "Reset level of each detector."
                    type = array
                    dimensions = [4]
                    items = {
                        type = float
                        units = TBD
                    }
                }
                {
                    name = channels
                    description  = "Number of channels. The possible numbers are 1, 4, 16, 32, 64."
                    type = integer
                    minimum = 1
                    maximum = 64
                    default = 64
                    units = channels
                }
                {
                    name = versionDSP
                    description = "Version number of downloaded DSP code in Leach controller."
                    type = array
                    dimensions = [4]
                    items = {
                        type = string
                    }
                }
                {
                    name = versionDriver
                    description = "Version number of Linux driver for Leach controller."
                    type = string
                }
                {
                    name = versionAPI
                    description = "Version number of ARC API."
                    type = string
                }
            ]
        }
        {
            name = power
            description = "This telemetry indicates  whether the detector power (not the detector controller power) is on or off."
            maxRate = 1
            archive = true
            archiveRate = 1
            attributes = [
                {
                    name = power
                    description = "The power state of each detector."
                    type = array
                    dimensions = [4]
                    items = {
                        enum = [ON, OFF]
                    }
                }
            ]       
        }
        {
            name = exposureState
            description = "This state telemetry includes the information about whether an exposure is in progress, the number of readouts done in the current ramp, the number of ramps completed in the current exposure."
            maxRate = 1
            archive = true
            archiveRate = 1
            attributes = [
                {
                    name = isAborted
                    description = "Flag for whether exposure in progress or last completed exposure has been aborted"
                    type = boolean
                    default = FALSE
                }
                {
                    name = abortInProgress
                    description = "Flag for whether exposure in progress is currently being aborted"
                    type = boolean
                    default = FALSE
                }
                {
                    name = exposureInProgress
                    description = "Flag for whether exposure is in progress. This flag becomes true when exposure of any of 4 detectors is in progress."
                    type = boolean
                    default = FALSE
                }
                {
                    name = readsDone
                    description = "Number of reads completed for ramp in progress or last completed."
                    type = array
                    dimensions = [4]
                    items = {
                        type = integer
                        minimum = 0
                        maximum = 100000
                    }
                    default = [0, 0, 0, 0]
                }
                {
                    name = rampsDone
                    description = "Number of ramps completed for exposure in progress or last completed."
                    type = array
                    dimensions = [4]
                    items = {
                        type = integer
                        minimum = 0
                        maximum = 100000
                    }
                    default = [0, 0, 0, 0]
                }
                {
                    name = exposureDone
                    description = "The number of exposures completed with the current configuration. This count is incremented every time START_EXPOSURE is called, and reset when LOAD_CONFIGURATION is called."
                    type = integer
                    minimum = 0
                    maximum = 99999
                }
            ]
        }
    ]

    events = [
        {
            name = startExposure
            description = """
This event notifies that a new exposure started.
"""
            archive = true
            attributes = [
                {
                    name = obsId
                    description = "Observation ID which the current exposure belongs to."
                    type = string
                    minimum = 0
                }
                {
                    name = exposure
                    description = "This number is incremented every time START_EXPOSURE is called, and reset when LOAD_CONFIGURATION is called. The number of the first exposure is 0."
                    type = integer
                    minimum = 0
                    maximum = 99999
                }
            ]
        }
        {
            name = readoutCompleted
            description = """
This event notifies that one readout has been read from the detector controller, and transferred to the Readout Processor. This event is issued every readout from each detector. Thus, the subscriber will typically receive this event 4 times for every readout cycle.
"""
            archive = true
            attributes = [
                {
                    name = detector
                    description = "Detector # from which the readout is generated."
                    type = integer
                    minimum = 1
                    maximum = 4
                }
                {
                    name = read
                    description = "Read # of the readout."
                    type = integer
                    minimum = 0
                    maximum = 99999
                }
                {
                    name = ramp
                    description = "Ramp # which the readout belongs to."
                    type = integer
                    minimum = 0
                    maximum = 99999
                }
                {
                    name = integrationTime
                    description = "Integration time of this readout (the time between the last reset and this readout)."
                    type = float
                    units = s
                    minimum = 0
                }
                {
                    name = exposure
                    description = "Exposure #."
                    type = integer
                    minimum = 0
                    maximum = 99999
                }
                {
                    name = obsId
                    description = "Observation ID which the exposure belongs to."
                    type = string
                }
            ]
        }
        {
            name = endExposure
            description = """
This event notifies that the last readout has been transferred to the Readout Processor.
Note that this event means that the last readout of the exposure is completed. Note that it is possible that DRS will be still processing the readouts and generating a science raw frame after this event is published.
"""
            archive = true
            attributes = [
                {
                    name = exposure
                    description = "Exposure #."
                    type = integer
                    minimum = 0
                    maximum = 99999
                }
                {
                    name = obsId
                    description = "Observation ID which the current exposure belongs to."
                    type = string
                    minimum = 0
                }
            ]
        }
        {
            name = aborting
            description = """
This event notifies that this assembly starts to try aborting the current exposure. When abort is completed, the corresponding “aborted” event will be issued. If the exposure successfully finishes before aborting, “endExposure” event will be published instea

The abort may be triggered by IS, or by the event of errors (all the detector controllers are not working properly, connection with Readout Processor failed etc.)
"""
            archive = true
            attributes = [
                {
                    name = exposure
                    description = "Exposure #."
                    type = integer
                    minimum = 0
                    maximum = 99999
                }
                {
                    name = obsId
                    description = "Observation ID which the current exposure belongs to."
                    type = string
                }
                {
                    name = reason
                    description = "The reason why this exposure was aborted."
                    type = string
                }
            ]
        }
        {
            name = aborted
            description = "This event notifies that the current exposure has been aborted."
            archive = true
            attributes = [
                {
                    name = exposure
                    description = "Exposure #."
                    type = integer
                    minimum = 0
                    maximum = 99999
                }
                {
                    name = obsId
                    description = "Observation ID which the current exposure belongs to."
                    type = string
                }
                {
                    name = reason
                    description = "The reason why this exposure was aborted."
                    type = string
                }
            ]
        }
        {
            name = readoutFailed
            description = """
This event (or alarm) notifies that one readout couldn’t be read from the detector controller. This event may happen if the detector controller or Detector HCD encounters an error while retrieving one readout from the detector, or when Detector HCD fails to transfer the readout to the Readout Processor.
"""
            archive = true
            attributes = [
                {
                    name = detector
                    description = "Detector # from which the readout is generated."
                    type = integer
                    minimum = 1
                    maximum = 4
                }
                {
                    name = read
                    description = "Read # of the readout."
                    type = integer
                    minimum = 0
                    maximum = 99999
                }
                {
                    name = ramp
                    description = "Ramp # which the readout belongs to."
                    type = integer
                    minimum = 0
                    maximum = 99999
                }
                {
                    name = integrationTime
                    description = "Integration time of this readout (the time between the end of the last reset and the beginning of this readout). This is equal to _readoutTime_ multiplied by (_ramp_ - 1)."
                    type = float
                    units = s
                    minimum = 0
                }
                {
                    name = exposure
                    description = "Exposure #."
                    type = integer
                    minimum = 0
                    maximum = 99999
                }
                {
                    name = obsId
                    description = "Observation ID which the exposure belongs to."
                    type = string
                }
                 {
                    name = reason
                    description = "The reason why this readout couldn't be read or saved."
                    type = string
                }
           ]
        }
    ]
}
